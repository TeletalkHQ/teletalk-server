 authRouter[routes.auth.signIn.method](
   routes.auth.signIn.url,
   middlewares.cellphoneValidator,
   controllers.signIn
 );

 authRouter[routes.auth.verify.method](
   routes.auth.verify.url,
   middlewares.verificationCodeValidator,
   middlewares.verifyVerificationCode,
   controllers.verify
 );


userRouter.use(
  middlewares.applyMiddlewares(
    [
       routes.user.addContact.url,
       routes.user.addBlock.url,
       routes.user.removeBlock.url,
       routes.user.removeContact.url,
       routes.user.editContact.url,
    ],
    middlewares.cellphoneValidator,
    middlewares.selfStuffCheck
  )
);

 userRouter.use(
   middlewares.applyMiddlewares(
     [routes.user.editContact.url, routes.user.addContact.url],
     middlewares.contactValidator
   )
 );

 const ignoredRoutesForAuth = [
   stuffRoutes.getAllStuffs,
   otherRoutes.getCountries,
   otherRoutes.getWelcomeMessage,
   authRoutes.signIn,
   serverRoutes.root,
 ];

 const ignoredUrlsForAuth = ignoredRoutesForAuth.map((item) => item.fullUrl);


// app.use(
//   middlewares.ignoreMiddlewares(ignoredUrlsForAuth, middlewares.authDefault)
// );


// app.use(
//   middlewares.ignoreMiddlewares(
//     [...ignoredUrlsForAuth, routes.auth.verify.fullUrl],
//     middlewares.checkCurrentUserStatus,
//     middlewares.attachCurrentUserId
//   )
// );

app.use(morgan("dev"));

app.use(helmet());
app.use(cookieParser());
